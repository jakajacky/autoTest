//
//  ViewController.m
//  Demo
//
//  Created by liuxingyu on 2017/4/11.
//  Copyright © 2017年 zhumengjiao. All rights reserved.
//

#import "FViewController.h"
#import "LineView.h"
#import "MNaviView.h"
#import "YYKit.h"
//#import "unit_test_for_app.h"
#import "SeMonitorController.h"
#import "ViewController.h"
#import "ResultViewController.h"
#import "MeasureViewController.h"
#import "SettingViewController.h"
#import "MeasureManager.h"
#import "DeviceManager.h"
#import "MeasureAPI.h"
#import "MBProgressHUD.h"
#import "LockSignal.h"
#import "ASProgressPopUpView.h"
#import "UIImage+memory.h"
#import "RFModel.h"
#import "CheckByte_XOR.h"

#define INITIALRATE 60000

@interface FViewController ()<ASProgressPopUpViewDelegate, ASProgressPopUpViewDataSource> {
    
    CADisplayLink *_dataLink;
    
    LineView *_lineView_LB;
    LineView *_lineView_RB;
    LineView *_lineView_LT;
    LineView *_lineView_RT;
    
    NSTimer *_popDataTimer;
    NSTimer *_timer;
    
    float lastY;
    int   countDown;
    int   countUp;
    int   countProgress;
    
    BOOL  isStopOrderDidResponse_L_T;
    BOOL  isStopOrderDidResponse_L_B;
    BOOL  isStopOrderDidResponse_R_T;
    BOOL  isStopOrderDidResponse_R_B;
    
    __block BOOL lb_sig;
    __block BOOL lt_sig;
    __block BOOL rb_sig;
    __block BOOL rt_sig;
}

@property (nonatomic, strong) MNaviView      *naviContainView;
@property (nonatomic, strong) ViewController *mainVC;
@property (nonatomic, strong) MeasureViewController *measureVC;
@property (nonatomic, strong) MeasureAPI     *api;
@property (nonatomic, strong) RFModel        *rfModel;
@property (nonatomic, strong) LockSignal     *ls;
@property (nonatomic, strong) MBProgressHUD  *hud;
@property (nonatomic, strong) UIImageView    *icon;
@property (nonatomic, strong) UILabel        *infoLabel;
@property (nonatomic, strong) UILabel        *timerLabel;
@property (nonatomic, strong) ASProgressPopUpView  *progress;

@property (nonatomic, strong) NSThread       *subThread;

@end

@implementation FViewController

- (void)viewDidLoad {
    [super viewDidLoad];
    // Do any additional setup after loading the view, typically from a nib.
    countDown     = 480;
    countUp       = 0;
    countProgress = 0;
    
    [self setLinks];
    [self reloadData];
    [self setSubViews];
    [self setLineView];
    
    _ls = [[LockSignal alloc] init];
    //    [[SeMonitorController sharedInstance] startMonitor];
    
    [self threadTest];
    [self performSelector:@selector(subThreadOpetion) onThread:self.subThread withObject:nil waitUntilDone:NO];
}

- (void)viewDidDisappear:(BOOL)animated {
    [super viewDidDisappear:animated];
    [self removeLinks];
    self.api = nil;
    [_lineView_LB removeFromSuperview];
    [_lineView_LT removeFromSuperview];
    [_lineView_RB removeFromSuperview];
    [_lineView_RT removeFromSuperview];
    _lineView_LB = nil;
    _lineView_LT = nil;
    _lineView_RB = nil;
    _lineView_RT = nil;
    
//    [MeasureManager defaultManager].lb_q_str = nil;
//    [MeasureManager defaultManager].lb_i_str = nil;
//    [MeasureManager defaultManager].lt_q_str = nil;
//    [MeasureManager defaultManager].lt_i_str = nil;
//    [MeasureManager defaultManager].rb_q_str = nil;
//    [MeasureManager defaultManager].rb_i_str = nil;
//    [MeasureManager defaultManager].rt_q_str = nil;
//    [MeasureManager defaultManager].rt_i_str = nil;
//    [[MeasureManager defaultManager].lt_rf_list removeAllObjects];
//    [[MeasureManager defaultManager].lb_rf_list removeAllObjects];
//    [[MeasureManager defaultManager].rt_rf_list removeAllObjects];
//    [[MeasureManager defaultManager].rb_rf_list removeAllObjects];
    [[MeasureManager defaultManager] clearAllCache];
    
//    self.view = nil;
    self.naviContainView = nil;
    self.icon = nil;
    self.infoLabel = nil;
    self.timerLabel = nil;
//    self.startMeasureBtn = nil;
    [self.subThread cancel];
    self.subThread = nil;
    
    [_popDataTimer invalidate];
    _popDataTimer = nil;
    
    [_timer invalidate];
    _timer = nil;
    
    NSNotificationCenter *center = [NSNotificationCenter defaultCenter];
    [center removeObserver:self];
}

- (void)viewDidAppear:(BOOL)animated {
    [super viewDidAppear:animated];
    self.view.backgroundColor = UIColorHex(eef8fa);
    
    NSNotificationCenter *center = [NSNotificationCenter defaultCenter];
    [center postNotificationName:PopPreViewController object:nil];
    [center addObserver:self selector:@selector(stopOrder:) name:StopOrderDidResponseNotification object:nil];
}


#pragma mark 停止指令得到响应
- (void)stopOrder:(NSNotification *)noti {
    AidPosition positon = [noti.object integerValue];
    switch (positon) {
        case AidPosition_LT:{
            isStopOrderDidResponse_L_T = YES;
            break;
        }
        case AidPosition_LB:{
            isStopOrderDidResponse_L_B = YES;
            break;
        }
        case AidPosition_RT:{
            isStopOrderDidResponse_R_T = YES;
            break;
        }
        case AidPosition_RB:{
            isStopOrderDidResponse_R_B = YES;
            break;
        }
        default:
            break;
    }
}


- (void)reloadData {
    [self.rfModel reloadData];
}

- (void)setSubViews {
    _naviContainView = [[MNaviView alloc] initWithFrame:CGRectMake(12, 12, self.view.width - 24, 44)];

    [self.view addSubview:_naviContainView];
    
    _icon = [[UIImageView alloc] initWithFrame:CGRectMake(20, 7, 30, 30)];
    _icon.image = self.rfModel.isMale?[UIImage imageWithMName:@"male"]:[UIImage imageWithMName:@"female"];
    [_naviContainView addSubview:_icon];
    
    _infoLabel = [[UILabel alloc] initWithFrame:CGRectMake(80, 0, 1000-80, 44)];
    _infoLabel.text = [self.rfModel getPatientInfoWithStep:MeasureStep_Normal];
    _infoLabel.font = [UIFont systemFontOfSize:15];
    _infoLabel.textColor = UIColorHex(999999);
    [_naviContainView addSubview:_infoLabel];
    
    _naviContainView.timerLabel.text = @"信号状态：可用";
    _naviContainView.sigImg.hidden = NO;
    
    _mainVC = (ViewController *)self.parentViewController.parentViewController;
    [_mainVC.backBtn removeAllTargets];
    for (UIView *v in _mainVC.naviBarView.subviews) {
        if ([v isKindOfClass:[UIButton class]]) {
            v.hidden = NO;
            _mainVC.backBtn = (UIButton *)v;
            [_mainVC.backBtn addTarget:self action:@selector(commit) forControlEvents:UIControlEventTouchUpInside];
        }
    }
    
    
}

- (void)setLineView {
    
    _lineView_LT = [[LineView alloc] initWithFrame:CGRectMake(12, CGRectGetMaxY(self.naviContainView.frame)+10, self.view.width - 24, 135) position:AidPosition_LT];
    _lineView_LT.signalImg.hidden = YES;
    _lineView_RT = [[LineView alloc] initWithFrame:CGRectMake(12, CGRectGetMaxY(_lineView_LT.frame)+5, self.view.width - 24, 135) position:AidPosition_RT];
    _lineView_RT.signalImg.hidden = YES;
    _lineView_LB = [[LineView alloc] initWithFrame:CGRectMake(12, CGRectGetMaxY(_lineView_RT.frame)+5, self.view.width - 24, 135) position:AidPosition_LB];
    _lineView_LB.signalImg.hidden = YES;
    _lineView_RB = [[LineView alloc] initWithFrame:CGRectMake(12, CGRectGetMaxY(_lineView_LB.frame)+5, self.view.width - 24, 135) position:AidPosition_RB];
    _lineView_RB.signalImg.hidden = YES;
    
    _progress = [[ASProgressPopUpView alloc] initWithFrame:CGRectMake(12, CGRectGetMaxY(_lineView_RB.frame)+44, 1000, 16)];
    _progress.font = [UIFont fontWithName:@"Futura-CondensedExtraBold" size:16];
    _progress.popUpViewAnimatedColors = @[[UIColor redColor], [UIColor orangeColor], [UIColor greenColor]];
    _progress.dataSource = self;
    _progress.layer.cornerRadius = 4;
    _progress.layer.masksToBounds = YES;
    _progress.clipsToBounds = NO;
    
    [_progress showPopUpViewAnimated:YES];
    
    
    [self.view addSubview:_lineView_LB];
    [self.view addSubview:_lineView_RB];
    [self.view addSubview:_lineView_LT];
    [self.view addSubview:_lineView_RT];
    [self.view addSubview:_progress];
}

- (void)setLinks {
    
    _timer = [NSTimer scheduledTimerWithTimeInterval:0.1
                                                     target:self
                                                   selector:@selector(timerEvent_popData)
                                                   userInfo:NULL
                                                    repeats:YES];
    [[NSRunLoop currentRunLoop] addTimer:_timer forMode:NSDefaultRunLoopMode];
    
//    _dataLink = [CADisplayLink displayLinkWithTarget:self selector:@selector(timerEvent_popData)];
//    [_dataLink addToRunLoop:[NSRunLoop currentRunLoop] forMode:NSRunLoopCommonModes];
    
//        _reloadLink = [CADisplayLink displayLinkWithTarget:self selector:@selector(checkLockSignal)];
//        [_reloadLink addToRunLoop:[NSRunLoop currentRunLoop] forMode:NSRunLoopCommonModes];
}

- (void)removeLinks {
    
    _dataLink == nil ?:[_dataLink invalidate];_dataLink = nil;
}

- (void)timerEvent_popData {
    
    [_lineView_LB startDrawWithOriginalData:[MeasureManager defaultManager].lb_rf_list];
    
    [_lineView_RB startDrawWithOriginalData:[MeasureManager defaultManager].rb_rf_list];
    
    [_lineView_LT startDrawWithOriginalData:[MeasureManager defaultManager].lt_rf_list];
    
    [_lineView_RT startDrawWithOriginalData:[MeasureManager defaultManager].rt_rf_list];
    

}

- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

#pragma mark - ASProgressPopUpView dataSource

// <ASProgressPopUpViewDataSource> is entirely optional
// it allows you to supply custom NSStrings to ASProgressPopUpView
- (NSString *)progressView:(ASProgressPopUpView *)progressView stringForProgress:(float)progress
{
    NSString *s;
    if (progress < 0.2) {
        s = [NSString stringWithFormat:@"%d%%", (int)(progress*100)];
    } else if (progress > 0.4 && progress < 0.6) {
        s = [NSString stringWithFormat:@"%d%%", (int)(progress*100)];
    } else if (progress > 0.75 && progress < 1.0) {
        s = [NSString stringWithFormat:@"%d%%", (int)(progress*100)];
    } else if (progress >= 1.0) {
        s = [NSString stringWithFormat:@"%d%%", (int)(progress*100)];
    }
    return s;
}

- (void)progressViewWillDisplayPopUpView:(ASProgressPopUpView *)progressView {
    
}

// required to calculate the default size for the popUpView
// simply list all the custom strings that will be displayed
- (NSArray *)allStringsForProgressView:(ASProgressPopUpView *)progressView;
{
    return @[@"20%", @"60%", @"75%", @"100%"];
}
- (void)progressT:(CGFloat)prog
{
    if (self.progress.progress >= 1.0) {
        // 进度完成
        [self sendStopOrder];
        
        UIStoryboard *story = [UIStoryboard storyboardWithName:@"Main" bundle:[NSBundle mainBundle]];
        __block ResultViewController *result = [story instantiateViewControllerWithIdentifier:@"result"];
        // 推出结果控制器
        [_mainVC.backBtn removeAllTargets];
        
        _mainVC    = (ViewController *)self.parentViewController.parentViewController;
        _measureVC = (MeasureViewController *)self.parentViewController;
        [_measureVC addChildViewController:result];
        result.modalPresentationStyle = UIModalPresentationFormSheet;
        result.preferredContentSize   = CGSizeMake(375, 678);
        result.view.frame = CGRectMake(_mainVC.view.width, 0, _mainVC.view.width, self.view.height);
        result.view.backgroundColor = [UIColor whiteColor];
        __weak typeof(_measureVC) meaself = _measureVC;
        __weak typeof(self) myself = self;
        result.uploadBlock = ^{
            [meaself restartTimer];
            for (UIView *v in myself.mainVC.naviBarView.subviews) {
                if ([v isKindOfClass:[UIButton class]]) {
                    v.hidden = YES;
                }
            }
            result = nil;
        };
        [_measureVC.view addSubview:result.view];
        
        [UIView animateWithDuration:0.35 animations:^{
            result.view.frame = CGRectMake(-120, 0, _mainVC.view.width, _mainVC.view.height);
        } completion:^(BOOL finished) {
            [self.view removeFromSuperview];
            [self removeFromParentViewController];
            
            
        }];
    }
    
    float progress = self.progress.progress;
//    if (self.progressButton.selected && progress < 1.0) {
    
        progress +=  prog;
    
    [self.progress setProgress:prog animated:YES];
}


#pragma mark - 子线程runloop
- (void)threadTest
{
    self.subThread = [[NSThread alloc] initWithTarget:self selector:@selector(subThreadEntryPoint) object:nil];
    [self.subThread setName:@"HLThread"];
    [self.subThread start];
//    self.subThread = subThread;
}

/**
 子线程启动后，启动runloop
 */
- (void)subThreadEntryPoint
{
    @autoreleasepool {
        NSRunLoop *runLoop = [NSRunLoop currentRunLoop];
        //如果注释了下面这一行，子线程中的任务并不能正常执行
        [runLoop addPort:[NSMachPort port] forMode:NSDefaultRunLoopMode];
        NSLog(@"启动RunLoop前--%@",runLoop.currentMode);
        [runLoop run];
    }
}

/**
 子线程任务
 */
- (void)subThreadOpetion
{
    _popDataTimer = [NSTimer scheduledTimerWithTimeInterval:1
                                                     target:self
                                                   selector:@selector(checkLockSignal)
                                                   userInfo:NULL
                                                    repeats:YES];
    [[NSRunLoop currentRunLoop] addTimer:_popDataTimer forMode:NSDefaultRunLoopMode];
}

#pragma mark - 暂时模拟上传结果数据
- (void)commit {
    // 点击返回，停止通信
    [self sendStopOrder];
    
    // 停止子线程的计时器
    [self.subThread cancel];
    
    _hud = [MBProgressHUD showHUDAddedTo:self.view animated:YES];
    _hud.labelText = @"正在上传数据";
    dispatch_async(dispatch_queue_create("conc", DISPATCH_QUEUE_CONCURRENT), ^{
        
        NSString *lb_mac = [DeviceManager defaultManager].L_B_Aid.macString;
        NSString *rb_mac = [DeviceManager defaultManager].R_B_Aid.macString;
        NSString *lt_mac = [DeviceManager defaultManager].L_T_Aid.macString;
        NSString *rt_mac = [DeviceManager defaultManager].R_T_Aid.macString;
        NSDictionary *lt_item =  @{
                                   @"place"    : @"LU",
                                   @"bt_mac"   : lt_mac,
                                   @"hw_name"  : @"aa",
                                   @"fw_ver"   : @"bb",
                                   @"mod_ver"  : @"cc",
                                   @"bio_rf_i" :
                                       [MeasureManager defaultManager].lt_i_str?[MeasureManager defaultManager].lt_i_str:@"",
                                   @"bio_rf_q" :
                                       [MeasureManager defaultManager].lt_q_str?[MeasureManager defaultManager].lt_q_str:@""
                                   };
        NSDictionary *rt_item =  @{
                                   @"place"    : @"RU",
                                   @"bt_mac"   : rt_mac,
                                   @"hw_name"  : @"aa",
                                   @"fw_ver"   : @"bb",
                                   @"mod_ver"  : @"cc",
                                   @"bio_rf_i" :
                                       [MeasureManager defaultManager].rt_i_str?[MeasureManager defaultManager].rt_i_str:@"",
                                   @"bio_rf_q" :
                                       [MeasureManager defaultManager].rt_q_str?[MeasureManager defaultManager].rt_q_str:@""
                                   };
        NSDictionary *lb_item =  @{
                                   @"place"    : @"LD",
                                   @"bt_mac"   : lb_mac,
                                   @"hw_name"  : @"aa",
                                   @"fw_ver"   : @"bb",
                                   @"mod_ver"  : @"cc",
                                   @"bio_rf_i" :
                                       [MeasureManager defaultManager].lb_i_str?[MeasureManager defaultManager].lb_i_str:@"",
                                   @"bio_rf_q" :
                                       [MeasureManager defaultManager].lb_q_str?[MeasureManager defaultManager].lb_q_str:@""
                                   };
        NSDictionary *rb_item =  @{
                                   @"place"    : @"RD",
                                   @"bt_mac"   : rb_mac,
                                   @"hw_name"  : @"aa",
                                   @"fw_ver"   : @"bb",
                                   @"mod_ver"  : @"cc",
                                   @"bio_rf_i" :
                                       [MeasureManager defaultManager].rb_i_str?[MeasureManager defaultManager].rb_i_str:@"",
                                   @"bio_rf_q" :
                                       [MeasureManager defaultManager].rb_q_str?[MeasureManager defaultManager].rb_q_str:@""
                                   };
        
        [self.api uploadResultWithResult:@[lb_item, rb_item, lt_item, rt_item] completion:^(BOOL success, id result, NSString *msg) {
            
            if (success) {
                dispatch_async(dispatch_get_main_queue(), ^{
                    _hud.mode = MBProgressHUDModeText;
                    _hud.labelText = @"上传数据成功";
                    [_hud hide:YES afterDelay:0.75];
                });
                
            }
            else {
                dispatch_async(dispatch_get_main_queue(), ^{
                    _hud.mode = MBProgressHUDModeText;
                    _hud.labelText = @"上传数据失败";
                    [_hud hide:YES afterDelay:0.75];
                });
                
            }
            
            dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(1 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
                [self dismissCurrentViewController];
            });
        }];

    });
}
#pragma mark 将波形数据转为字符串
- (NSString *)stringConvertByData:(NSArray *)data {
    if (data.count == 0) {
        return @"";
    }
    int i = 0;
    NSString *str = [NSString stringWithFormat:@"%d", [data[0] intValue]];
    for (NSNumber *n in data) {
        if (i != 0) {
            str = [NSString stringWithFormat:@"%@,%d", str, n.intValue];
        }
        i += 1;
    }
    
    return str;
}

#pragma mark - dismiss 控制器
- (void)dismissCurrentViewController {
    [UIView animateWithDuration:0.35 animations:^{
        self.view.frame = CGRectMake(_mainVC.view.width, 0, _mainVC.view.width, _mainVC.view.height);
    } completion:^(BOOL finished) {
        for (ViewController *vc in [_mainVC childViewControllers]) {
            if ([vc isKindOfClass:[SettingViewController class]]) {
                vc.view.userInteractionEnabled = YES;
            }
        }
        [self.view removeFromSuperview];
        [self removeFromParentViewController];
        self.uploadBlock();
    }];
}

#pragma mark - 锁定算法
#pragma mark - 锁定算法
- (void)checkLockSignal {
    // 剩余找位时间
    countDown -= 1;
    
    // 信号质量
    lb_sig = [MeasureManager defaultManager].lb_quality>=2?YES:NO;
    lt_sig = [MeasureManager defaultManager].lt_quality>=2?YES:NO;
    rb_sig = [MeasureManager defaultManager].rb_quality>=2?YES:NO;
    rt_sig = [MeasureManager defaultManager].rt_quality>=2?YES:NO;

    if (1) {//lt_sig&&lb_sig&&rt_sig&&rb_sig
        // 信号质量合格检测
        countUp += 1;
        
        dispatch_async(dispatch_get_main_queue(), ^{
            self.naviContainView.timerLabel.text = @"信号状态：可用";
            self.naviContainView.timerLabel.textColor = UIColorHex(32d250);
            self.naviContainView.sigImg.backgroundColor = UIColorHex(32d250);
        });
        
        if (countUp == 3) {
            countProgress += countUp;
            countUp = 0;
        }
    }
    else {
        countUp = 0;
        
        dispatch_async(dispatch_get_main_queue(), ^{
            self.naviContainView.timerLabel.text = @"信号状态：不可用";
            self.naviContainView.timerLabel.textColor = UIColorHex(ff8a00);
            self.naviContainView.sigImg.backgroundColor = UIColorHex(ff8a00);
        });
    }
    
    dispatch_async(dispatch_get_main_queue(), ^{
        [self progressT:countProgress/15.0];
    });
    
}

#pragma mark - 向下位机发送停止命令
- (void)sendStopOrder {
    Byte byte[] = {0x0a,0x04,0x04,0x00,0x00,0xA5,0xA5,0xA5,0xA5,0xA5,0xA5,0xA5,0xA5,0xA5,0xA5,0xA5,0xA5,0xA5,0xA5,0xf0};
    // 异或校验
    byte[4] = [CheckByte_XOR XORByte:byte formByte:1 toByte:3];
    NSData *data = [NSData dataWithBytes:byte length:sizeof(byte)];
    
    MeasureViewController *mea = (MeasureViewController *)self.parentViewController;
    [[DeviceManager defaultManager].L_T_CB_Peripheral setDelegate:mea];
    [[DeviceManager defaultManager].L_B_CB_Peripheral setDelegate:mea];
    [[DeviceManager defaultManager].R_T_CB_Peripheral setDelegate:mea];
    [[DeviceManager defaultManager].R_B_CB_Peripheral setDelegate:mea];
    // 停止命令
    // 响应时间超时，二次重发
    NSLog(@"pause 0");
    [[DeviceManager defaultManager].L_T_CB_Peripheral writeValue:data forCharacteristic:[DeviceManager defaultManager].L_T_CB_Characteristic type:1];
    [[DeviceManager defaultManager].L_B_CB_Peripheral writeValue:data forCharacteristic:[DeviceManager defaultManager].L_B_CB_Characteristic type:1];
    [[DeviceManager defaultManager].R_T_CB_Peripheral writeValue:data forCharacteristic:[DeviceManager defaultManager].R_T_CB_Characteristic type:1];
    [[DeviceManager defaultManager].R_B_CB_Peripheral writeValue:data forCharacteristic:[DeviceManager defaultManager].R_B_CB_Characteristic type:1];
    
    
    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.2 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
        
        // 1次重连
        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.2 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
            if (!isStopOrderDidResponse_L_T) {
                [[DeviceManager defaultManager].L_T_CB_Peripheral writeValue:data forCharacteristic:[DeviceManager defaultManager].L_T_CB_Characteristic type:1];
                // 2次重连
                dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.4 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
                    if (!isStopOrderDidResponse_L_T) {
                        [[DeviceManager defaultManager].L_T_CB_Peripheral writeValue:data forCharacteristic:[DeviceManager defaultManager].L_T_CB_Characteristic type:1];
                        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.8 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
                            if(!isStopOrderDidResponse_L_T) {
                                // Exit
                                MBProgressHUD *hud = [MBProgressHUD showHUDAddedTo:self.view animated:YES];
                                hud.mode = MBProgressHUDModeText;
                                hud.labelText = @"左上肢贴片t停止指令响应超时";
                                [hud hide:YES afterDelay:1];
                                
                            }
                        });
                    }
                });
            }
            if (!isStopOrderDidResponse_L_B) {
                [[DeviceManager defaultManager].L_B_CB_Peripheral writeValue:data forCharacteristic:[DeviceManager defaultManager].L_B_CB_Characteristic type:1];
                
                dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.4 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
                    if (!isStopOrderDidResponse_L_B) {
                        [[DeviceManager defaultManager].L_B_CB_Peripheral writeValue:data forCharacteristic:[DeviceManager defaultManager].L_B_CB_Characteristic type:1];
                        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.8 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
                            if(!isStopOrderDidResponse_L_B) {
                                // Exit
                                MBProgressHUD *hud = [MBProgressHUD showHUDAddedTo:self.view animated:YES];
                                hud.mode = MBProgressHUDModeText;
                                hud.labelText = @"左下踝贴片停止指令响应超时";
                                [hud hide:YES afterDelay:1];
                                
                            }
                        });
                    }
                });
            }
            if (!isStopOrderDidResponse_R_T) {
                [[DeviceManager defaultManager].R_T_CB_Peripheral writeValue:data forCharacteristic:[DeviceManager defaultManager].R_T_CB_Characteristic type:1];
                
                dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.4 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
                    if (!isStopOrderDidResponse_R_T) {
                        [[DeviceManager defaultManager].R_T_CB_Peripheral writeValue:data forCharacteristic:[DeviceManager defaultManager].R_T_CB_Characteristic type:1];
                        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.8 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
                            if(!isStopOrderDidResponse_R_T) {
                                // Exit
                                MBProgressHUD *hud = [MBProgressHUD showHUDAddedTo:self.view animated:YES];
                                hud.mode = MBProgressHUDModeText;
                                hud.labelText = @"右上肢贴片停止指令响应超时";
                                [hud hide:YES afterDelay:1];
                                
                            }
                        });
                    }
                });
            }
            if (!isStopOrderDidResponse_R_B) {
                [[DeviceManager defaultManager].R_B_CB_Peripheral writeValue:data forCharacteristic:[DeviceManager defaultManager].R_B_CB_Characteristic type:1];
                
                dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.4 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
                    if (!isStopOrderDidResponse_R_B) {
                        [[DeviceManager defaultManager].R_B_CB_Peripheral writeValue:data forCharacteristic:[DeviceManager defaultManager].R_B_CB_Characteristic type:1];
                        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.8 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
                            if(!isStopOrderDidResponse_R_B) {
                                // Exit
                                MBProgressHUD *hud = [MBProgressHUD showHUDAddedTo:self.view animated:YES];
                                hud.mode = MBProgressHUDModeText;
                                hud.labelText = @"右下踝贴片停止指令响应超时";
                                [hud hide:YES afterDelay:1];
                                
                            }
                        });
                    }
                });
            }
            
        });
        
    });
}

#pragma mark - private properties
- (MeasureAPI *)api {
    if (!_api) {
        _api = [MeasureAPI biz];
    }
    return _api;
}

- (RFModel *)rfModel {
    if (!_rfModel) {
        _rfModel = [[RFModel alloc] init];
    }
    return _rfModel;
}

@end
