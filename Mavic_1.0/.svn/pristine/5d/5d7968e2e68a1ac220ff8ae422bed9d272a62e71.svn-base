//
//  LoginApi.m
//  Mavic
//
//  Created by zhangxiaoqiang on 2017/3/31.
//  Copyright © 2017年 LoHas-Tech. All rights reserved.
//

#import "LoginApi.h"
#import "DCHttpRequest.h"
#import "LoginManager.h"

@interface LoginApi ()
{
    NSDictionary *params;
}
@property (nonatomic, strong) DCHttpRequest *request;
@property (nonatomic, strong) DCDatabase *mainDatabase;

@end

@implementation LoginApi

- (void)loginWithUserName:(NSString *)name pwd:(NSString *)password completion:(void(^)(BOOL, id, NSString *))complete {
    params = @{@"login_name" : name,
               @"password"   : password};
    [self loadRequestPropertiesWithMethod:@"auth/login"];
    
    [self.request startWithSuccess:^(id result) {
        complete(YES, result, @"");
        
    } failure:^(NSInteger errCode, NSString *errMsg, NSDictionary *userInfo) {
        complete(NO, userInfo,errMsg);
    }];
}
- (void)loadRequestPropertiesWithMethod:(NSString *)method
{
    [self.request cancelRequest];
    
    self.request.type    = DCHttpRequestTypePOST;
    self.request.baseUrl = BASE_URL;
    self.request.method  = method;
    self.request.params  = params;
    
    self.request.allowsLogMethod       = kLogEnabled;
    self.request.allowsLogHeader       = kHttpRequestAllowsLogHeader;
    self.request.allowsLogResponseGET  = kHttpRequestAllowsLogResponseGET;
    self.request.allowsLogResponsePOST = kHttpRequestAllowsLogResponsePOST;
    self.request.allowsLogRequestError = kHttpRequestAllowsLogRequestError;
    
    [self.request setValue:ACCESS_TOKEN
        forHTTPHeaderField:@"ACCESS_TOKEN"];
    [self.request setValue:@"application/json"
        forHTTPHeaderField:@"Content-Type"];
}

- (void)loadRequestTokenPropertiesWithMethod:(NSString *)method
{
    [self.request cancelRequest];
    
    self.request.type    = DCHttpRequestTypePOST;
    self.request.baseUrl = BASE_URL;
    self.request.method  = method;
    self.request.params  = params;
    
    self.request.allowsLogMethod       = kLogEnabled;
    self.request.allowsLogHeader       = kHttpRequestAllowsLogHeader;
    self.request.allowsLogResponseGET  = kHttpRequestAllowsLogResponseGET;
    self.request.allowsLogResponsePOST = kHttpRequestAllowsLogResponsePOST;
    self.request.allowsLogRequestError = kHttpRequestAllowsLogRequestError;
    
    User *user = [LoginManager defaultManager].currentUser;
    
    [self.request setValue:[NSString stringWithFormat:@"%ld",user.app_KEY]
        forHTTPHeaderField:@"APP_KEY"];
    [self.request setValue:user.app_TOKEN
        forHTTPHeaderField:@"APP_TOKEN"];
    [self.request setValue:ACCESS_TOKEN
        forHTTPHeaderField:@"ACCESS_TOKEN"];
    [self.request setValue:@"application/json"
        forHTTPHeaderField:@"Content-Type"];
}

- (DCHttpRequest *)request {
    if (!_request) {
        _request = [[DCHttpRequest alloc] init];
    }
    return _request;
}

#pragma mark  检查手机号
- (void)checkMobileDuplicate:(NSString *)phone compeletion:(void(^)(BOOL, NSString *))complete {
    params = @{@"mobile"   : phone};
    [self loadRequestPropertiesWithMethod:@"user/q/checkMobile"];
    
    [self.request startWithSuccess:^(id result) {
        complete(YES, result[@"msg"]);
        
    } failure:^(NSInteger errCode, NSString *errMsg, NSDictionary *userInfo) {
        complete(NO, errMsg);
    }];
}

#pragma mark - 注册请求
#pragma mark  注册
- (void)registerWithPhone:(NSString *)phone pwd:(NSString *)pwd compeletion:(void(^)(BOOL, NSString *))complete {
    params = @{@"login_name" : phone,
               @"password" : pwd,
               @"mobile" : phone};
    [self loadRequestPropertiesWithMethod:@"auth/reg"];
    
    [self.request startWithSuccess:^(id result) {
        complete(YES, result[@"id"]);
        
    } failure:^(NSInteger errCode, NSString *errMsg, NSDictionary *userInfo) {
        complete(NO, errMsg);
    }];
}

#pragma mark  验证校验码
- (void)checkValidationCodeWithPhone:(NSString *)phone authCode:(NSString *)auth_code type:(NSInteger)type compeletion:(void(^)(BOOL, NSString *))complete {
    params = @{@"phone"     : phone,
               @"type"      : @(type),
               @"auth_code" : auth_code};
    [self loadRequestPropertiesWithMethod:@"auth/validationcode"];
    
    [self.request startWithSuccess:^(id result) {
        if (result) {
            if (result[@"user_id"]) {
                complete(NO, @"该手机号已经被注册");
            }
            else {
                complete(YES, @"验证码正确");
            }
        }
        else {
            complete(NO, @"验证码无效，请重新获取");
        }
        
    } failure:^(NSInteger errCode, NSString *errMsg, NSDictionary *userInfo) {
        complete(NO, errMsg);
    }];
}

#pragma mark  获取验证码
- (void)getValidationCodeWithPhoneNumber:(NSString *)phone completion:(void(^)(BOOL, NSString *))complete {
    params = @{@"phone"   : phone,
               @"type"    : @(1),
               @"user_id" : @""};
    [self loadRequestPropertiesWithMethod:@"auth/getValidationcode"];
    
    [self.request startWithSuccess:^(id result) {
        complete(YES, result[@"msg"]);
        
    } failure:^(NSInteger errCode, NSString *errMsg, NSDictionary *userInfo) {
        complete(NO, errMsg);
    }];
}

#pragma mark - 保存用户基本信息
- (void)saveCurrentPatient:(Patient *)patient completion:(void(^)(BOOL,NSString *))complete {
    
    NSString *birth = [patient.age componentsSeparatedByString:@"("].firstObject;
    NSString *ages  = [patient.age componentsSeparatedByString:@"("].lastObject;
    NSString *age   = [ages componentsSeparatedByString:@")"].firstObject;
    
    params = @{@"id"    :patient.Id,
               @"name"  :patient.name,
               @"gender":patient.gender,
               @"age"   :@([age intValue]),
               @"height":@(patient.height),
               @"weight":@(patient.weight),
               @"birth" :birth};
    [self loadRequestTokenPropertiesWithMethod:@"user/u/save"];
    [self.request startWithSuccess:^(id result) {
        complete(YES,@"");
    } failure:^(NSInteger errCode, NSString *errMsg, NSDictionary *userInfo) {
        complete(NO,errMsg);
    }];
}

#pragma mark 数据库操作
- (void)saveCurrentUser:(User *)user {
    self.mainDatabase.allowsLogError = YES;
    self.mainDatabase.allowsLogStatement = YES;
    [self.mainDatabase updateObjects:@[user]];
}

- (void)saveCurrentPatient:(Patient *)patient {
    self.mainDatabase.allowsLogError = YES;
    self.mainDatabase.allowsLogStatement = YES;
    [self.mainDatabase updateObjects:@[patient]];
}

- (User *)getCurrentUserFormMainDB {
    NSString *sql = [NSString stringWithFormat:
                     @"SELECT * FROM %@ WHERE isLatestLogin = ?",
                     [User tableName]];
    
    NSArray *result = [self.mainDatabase query:sql withArguments:@[@YES] convertTo:[User class]];
    
    return result.firstObject;
}

- (Patient *)getCurrentPatientFormMainDB {
    NSString *sql = [NSString stringWithFormat:
                     @"SELECT * FROM %@ where isLastAdd = ?",
                     [Patient tableName]];
    
    NSArray *result = [self.mainDatabase query:sql withArguments:@[@(YES)] convertTo:[Patient class]];
    
    return result.lastObject;
}

- (NSArray *)getUsersFormMainDB {
    NSString *sql = [NSString stringWithFormat:
                     @"SELECT * FROM %@",
                     [User tableName]];
    
    NSArray *result = [self.mainDatabase query:sql withArguments:@[] convertTo:[User class]];
    
    return result;
}

#pragma mark 删除患者数据库
- (void)deletePatientDatabase {
    NSString *sql = [NSString stringWithFormat:@"DELETE FROM %@", [Patient tableName]];
    [self.mainDatabase update:sql];
}

- (DCDatabase *)mainDatabase {
    return [self database:@"main.db" withKey:@"1234567890ABCDEF"];
}

@end
